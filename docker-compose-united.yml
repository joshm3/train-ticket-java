
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - my-network

  nacos:
    image: nacos/nacos-server:2.0.1
    container_name: nacos
    ports:
      - "8848:8848" # Default Nacos port
    environment:
      MODE: 'standalone'
      PREFER_HOST_MODE: 'hostname'
      NACOS_SERVER_IP: '127.0.0.1'
      MYSQL_SERVICE_PORT: '3306'
      MYSQL_SERVICE_HOST: 'ts-mysql'
      MYSQL_SERVICE_DB_NAME: 'nacos'
      MYSQL_SERVICE_USER: 'root'
      MYSQL_SERVICE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos"]
      timeout: 10s
      retries: 10

  ts-mysql:
    image: mysql:5.7
    command: [ "--max_connections=10000" ]
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes: 
      - ./init:/docker-entrypoint-initdb.d
    networks:
      my-network:
        aliases:
          - ts-united-monolith-mysql
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=${MYSQL_ROOT_PASSWORD} --execute \"SHOW DATABASES;\""
      timeout: 5s
      retries: 10

  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - my-network

  ts-ui-dashboard:
    build: ts-ui-dashboard
    image: ${IMG_REPO}/ts-ui-dashboard:${IMG_TAG}
    restart: always
    ports:
      - 8080:8080
    networks:
      - my-network
    deploy:
      resources:
        limits:
          memory: ${SERVICE_MEMORY_LIMIT}
  
  ts-united-monolith:
    build: ts-united-monolith
    image: ${IMG_REPO}/ts-united-monolith:${IMG_TAG}
    restart: always
    ports:
      - 18888:18888
      - 16115:16115
      - 17101:17001
      - 16108:16108
      - 16101:16101
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
          limits:
            memory: ${SERVICE_MEMORY_LIMIT}
    networks:
      my-network:
        aliases:
        - ts-admin-user-service
        - ts-user-service
        - ts-auth-service
        - ts-verification-code-service
        - ts-food-service
        - ts-food-delivery-service
        - ts-station-food-service
        - ts-train-food-service
        - ts-consign-service
        - ts-consign-price-service
        - ts-contacts-service
        - ts-preserve-service
        - ts-admin-basic-info-service
        - ts-security-service
        - ts-assurance-service
        - ts-preserve-other-service
        - ts-cancel-service
        - ts-execute-service
        - ts-rebook-service
        - ts-travel-service
        - ts-travel2-service
        - ts-admin-travel-service
        - ts-travel-plan-service
        - ts-route-plan-service
        - ts-seat-service
        - ts-order-service
        - ts-order-other-service
        - ts-admin-order-service
        - ts-inside-payment-service
        - ts-payment-service
        - ts-admin-route-service
        - ts-config-service
        - ts-basic-service
        - ts-price-service
        - ts-route-service
        - ts-station-service
        - ts-train-service
        - ts-delivery-service
        - ts-notification-service
        - ts-wait-order-service
        - ts-avatar-service
        - ts-ticket-office-service
        - ts-voucher-service
        - ts-gateway-service
    depends_on:
      ts-mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    environment:
      NACOS_ADDRS: 'nacos:8848' 
      test_send_mail_user: 'default_mail_user'
      rabbitmq_host: 'rabbitmq'

networks:
  my-network:
    # driver: overlay
    driver: bridge
